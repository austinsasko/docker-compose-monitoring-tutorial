name: CICD

on: 
  push:
      branches:
        - main
  workflow_dispatch:

jobs:
  build_and_deploy_monitoring:
    concurrency: monitoring
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Save secrets to mon.env file and query exporter config
        run: |
          cp custom/mon.env.example custom/mon.env

          sed -i "s|REPLACE_ME_DATASOURCE_NAME|${{ secrets.DB_DATASOURCE }}|g" custom/mon.env
          sed -i "s|REPLACE_ME_GRAFANA_USER|${{ secrets.GF_ADMIN_USER }}|g" custom/mon.env
          sed -i "s|REPLACE_ME_GRAFANA_PASS|${{ secrets.GF_ADMIN_PASS }}|g" custom/mon.env
          sed -i "s|REPLACE_ME_DISCORD_TOKEN|${{ secrets.DISCORD_TOKEN }}|g" custom/mon.env
          sed -i "s|REPLACE_ME_DBC_STRING|${{ secrets.DBC_STRING }}|g" custom/mon.env

          cp custom/query_exporter_config.yaml.example query_exporter/query_exporter_config.yaml
          sed -i "s|REPLACE_ME_DB_NAME|${{ secrets.DB_NAME }}|g" query_exporter/query_exporter_config.yaml

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/ssh_key
          echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 0400 ~/.ssh/ssh_key
          echo -e "Host ${{ secrets.SSH_HOST }}\n\tHostName ${{ secrets.SSH_HOST }}\n\tUser ${{ secrets.SSH_USER }}\n\tIdentityFile ~/.ssh/ssh_key" >> ~/.ssh/config

      - name: Install docker-compose
        run: pip install docker-compose
      
      - name: Create context for docker host
        run: docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}"
      
      - name: Set default context for docker
        run: docker context use remote
      
      - name: Always build the monitoring stack
        run: COMPOSE_PARAMIKO_SSH=1 COMPOSE_IGNORE_ORPHANS=1 docker-compose --context remote -f docker-compose-monitoring.yml up --build -d

  build_and_deploy_app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Save secrets to traefik.env files
        run: |
          cp custom/traefik.env.example custom/traefik.env
          sed -i "s|REPLACE_ME_CF_EMAIL|${{ secrets.CF_EMAIL }}|g" custom/traefik.env
          sed -i "s|REPLACE_ME_CF_DNS_API_TOKEN|${{ secrets.CF_API_KEY }}|g" custom/traefik.env
          sed -i "s|REPLACE_ME_DOMAIN|${{ secrets.DOMAIN }}|g" custom/traefik.env docker-compose*
          sed -i "s|REPLACE_ME_ZONE_ID|${{ secrets.CF_ZONE_ID }}|g" custom/traefik.env

      - name: Save secrets to traefik htpasswd file
        run: |
          cp custom/traefik.htpasswd.example traefik/traefik.htpasswd
          sed -i "s|REPLACE_ME_WEB_AUTH_USER|${{ secrets.T_HTUSER }}|g" traefik/traefik.htpasswd
          sed -i "s|REPLACE_ME_WEB_AUTH_BCRYPT_PASSWORD|${{ secrets.T_HTPASSWD }}|g" traefik/traefik.htpasswd
      
      - name: Setup SSH stuff
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/ssh_key
          echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 0400 ~/.ssh/ssh_key
          echo -e "Host ${{ secrets.SSH_HOST }}\n\tHostName ${{ secrets.SSH_HOST }}\n\tUser ${{ secrets.SSH_USER }}\n\tIdentityFile ~/.ssh/ssh_key" >> ~/.ssh/config
     
      - name: Save secrets to bot.env and db.env files
        run: |
          cp custom/bot.env.example custom/bot.env
          cp custom/db.env.example custom/db.env

          sed -i "s|REPLACE_ME_DB_ROOT_PASS|${{ secrets.DB_ROOT_PASS }}|g" custom/db.env custom/bot.env
          sed -i "s|REPLACE_ME_DB_NAME|${{ secrets.DB_NAME }}|g" custom/db.env custom/bot.env
          sed -i "s|REPLACE_ME_DB_USER_PASS|${{ secrets.DB_USER_PASS }}|g" custom/db.env custom/bot.env
          sed -i "s|REPLACE_ME_DB_USER|${{ secrets.DB_USER }}|g" custom/db.env custom/bot.env
        if: github.ref == 'refs/heads/main'

      - name: Save db init scripts
        run: |
          cp custom/table.sql.example mariadb/initscripts/table.sql
          cp custom/user.sql.example mariadb/initscripts/user.sql
          sed -i "s|REPLACE_ME_DB_NAME|${{ secrets.DB_NAME }}|g" mariadb/initscripts/*.sql
          sed -i "s|REPLACE_ME_EXPORTER_PASS|${{ secrets.EXPORTER_PASS }}|g" mariadb/initscripts/*.sql
        if: github.ref == 'refs/heads/main'

      - name: Install docker-compose
        run: pip install docker-compose
      
      - name: Create context for docker host
        run: docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}"
      
      - name: Set default context for docker
        run: docker context use remote

      - name: Build the prod stack
        run: COMPOSE_PARAMIKO_SSH=1 COMPOSE_IGNORE_ORPHANS=1 docker-compose --context remote up --build -d
        if: github.ref == 'refs/heads/main'